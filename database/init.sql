-- Code Advisor Agent Database Schema
-- PostgreSQL initialization script

-- Create database (run this manually if needed)
-- CREATE DATABASE code_advisor;

-- Connect to the database
\c code_advisor;

-- Create analysis_history table
CREATE TABLE IF NOT EXISTS analysis_history (
    id SERIAL PRIMARY KEY,
    code_snippet TEXT NOT NULL,
    suggestions JSONB NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_analysis_created_at
ON analysis_history(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_analysis_suggestions
ON analysis_history USING GIN (suggestions);

-- Create a view for analysis statistics
CREATE OR REPLACE VIEW analysis_stats AS
SELECT
    DATE(created_at) as analysis_date,
    COUNT(*) as total_analyses,
    AVG(jsonb_array_length(suggestions)) as avg_suggestions_per_analysis
FROM analysis_history
GROUP BY DATE(created_at)
ORDER BY analysis_date DESC;

-- Sample query to get recent analyses
-- SELECT id, LEFT(code_snippet, 50) as snippet_preview,
--        jsonb_array_length(suggestions) as suggestion_count,
--        created_at
-- FROM analysis_history
-- ORDER BY created_at DESC
-- LIMIT 10;

-- Grant permissions (adjust user as needed)
-- GRANT ALL PRIVILEGES ON DATABASE code_advisor TO postgres;
-- GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
-- GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;

COMMENT ON TABLE analysis_history IS 'Stores all code analysis requests and their suggestions';
COMMENT ON COLUMN analysis_history.id IS 'Unique identifier for each analysis';
COMMENT ON COLUMN analysis_history.code_snippet IS 'The Python code that was analyzed';
COMMENT ON COLUMN analysis_history.suggestions IS 'JSON array of suggestions generated by the analyzer';
COMMENT ON COLUMN analysis_history.created_at IS 'Timestamp when the analysis was performed';
